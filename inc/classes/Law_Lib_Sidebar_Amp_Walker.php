<?php
if (!class_exists(Walker_Nav_Menu::class)) {
    return;
}

if (!class_exists('Law_Lib_Sidebar_Amp_Walker')) {
    class Law_Lib_Sidebar_Amp_Walker extends Walker_Nav_Menu
    {
        public $in_menu = [];

        public function walk($elements, $max_depth, ...$args)
        {
            $menu = $args[0]->menu??($args[0]['menu']??'');
            if ($menu && !has_nav_menu($menu)) {
                _wp_menu_item_classes_by_context( $elements );
            }

            return parent::walk($elements, $max_depth, ...$args); // TODO: Change the autogenerated stub
        }

        /**
         * Starts the list before the elements are added.
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int $depth Depth of menu item. Used for padding.
         * @param stdClass $args An object of wp_nav_menu() arguments.
         *
         * @see Walker::start_lvl()
         *
         * @since 3.0.0
         *
         */
        public function start_lvl(&$output, $depth = 0, $args = null)
        {
            if (isset($args->item_spacing) && 'discard' === $args->item_spacing) {
                $t = '';
                $n = '';
            } else {
                $t = "\t";
                $n = "\n";
            }
            $indent = $t ? str_repeat($t, $depth + 1) : '';
            if ($this->has_children) {
                $nested_classes = ['nested-sub-menu'];
                $nested_classes = implode(' ',
                    apply_filters('nav_menu_nested_submenu_css_class', $nested_classes, $args, $depth));
                $nested_classes = $nested_classes ? ' class="' . esc_attr($nested_classes) . '"' : '';
                $output         .= "$indent<div$nested_classes amp-nested-submenu>$n";
                $indent         = $t ? "$indent$t" : '';
            }
            $classes       = ['sub-menu'];
            $class_names   = implode(' ', apply_filters('nav_menu_submenu_css_class', $classes, $args, $depth));
            $class_names   = $class_names ? ' class="' . esc_attr($class_names) . '"' : '';
            $output        .= "$indent<ul$class_names>$n";
            $close_classes = ['sub-menu-close'];
            $close_classes = implode(' ',
                apply_filters('nav_menu_close_submenu_css_class', $close_classes, $args, $depth));
            $close_classes = $close_classes ? ' class="' . esc_attr($close_classes) . '"' : '';
            $close_text    = apply_filters(
                'nav_menu_close_text',
                '<span>&lt;</span>',
                $args,
                $depth
            );
            $output        .= "$indent$t<li$close_classes><div amp-nested-submenu-close>$close_text</div></li>\n";
        }

        /**
         * Ends the list of after the elements are added.
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int $depth Depth of menu item. Used for padding.
         * @param stdClass $args An object of wp_nav_menu() arguments.
         *
         * @see Walker::end_lvl()
         *
         * @since 3.0.0
         *
         */
        public function end_lvl(&$output, $depth = 0, $args = null)
        {
            if (isset($args->item_spacing) && 'discard' === $args->item_spacing) {
                $t = '';
                $n = '';
            } else {
                $t = "\t";
                $n = "\n";
            }
            $indent  = $t ? str_repeat($t, $depth + 1) : '';
            $indent2 = $indent;
            if ( ! $this->has_children) {
                $indent  = "$indent$t";
                $indent2 = "$indent$t";
            }
            $output .= "$indent2</ul>$n";
            if ( ! $this->has_children) {
                $output .= "$indent</div>{$n}";
            }
        }

        /**
         * Starts the element output.
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param WP_Post $item Menu item data object.
         * @param int $depth Depth of menu item. Used for padding.
         * @param stdClass $args An object of wp_nav_menu() arguments.
         * @param int $id Current item ID.
         *
         * @see Walker::start_el()
         *
         * @since 3.0.0
         * @since 4.4.0 The {@see 'nav_menu_item_args'} filter was added.
         *
         */
        public function start_el(&$output, $item, $depth = 0, $args = null, $id = 0)
        {
            if (isset($args->item_spacing) && 'discard' === $args->item_spacing) {
                $t = '';
                $n = '';
            } else {
                $t = "\t";
                $n = "\n";
            }
            $indent     = $t ? str_repeat($t, $depth + 1 + ($this->has_children ? 1 : 0)) : '';
            $additional = '';

            $classes     = empty($item->classes) ? [] : (array)$item->classes;
            $classes[]   = 'menu-item-' . $item->ID;
            $args        = apply_filters('nav_menu_item_args', $args, $item, $depth);
            $class_names = implode(
                ' ',
                apply_filters('nav_menu_css_class', array_filter($classes), $item, $args, $depth)
            );
            $class_names = $class_names ? ' class="' . esc_attr($class_names) . '"' : '';
            $id          = apply_filters('nav_menu_item_id', 'menu-item-' . $item->ID, $item, $args, $depth);
            $id          = $id ? ' id="' . esc_attr($id) . '"' : '';

            $output .= "$indent<li$id{$class_names}>{$n}";
            if ($this->has_children) {
                $open_classes = ['submenu-open'];
                $open_classes = implode(' ',
                    apply_filters('nav_menu_open_css_class', array_filter($open_classes), $item, $args, $depth));
                $open_classes = $class_names ? ' class="' . esc_attr($open_classes) . '"' : '';
                $open_text    = apply_filters('nav_menu_open_text', '', $item, $args, $depth);
                $additional   = "<span{$open_classes} amp-nested-submenu-open>{$open_text}</span>";
            } else {
                $indent .= "{$t}{$t}";
            }

            $attrs           = [];
            $attrs['title']  = ! empty($item->attr_title)
                ? $item->attr_title
                : ($item->post_title??'');
            $attrs['target'] = ! empty($item->target) ? $item->target : '';
            if ('_blank' === $item->target && empty($item->xfn)) {
                $attrs['rel'] = 'noopener';
            } elseif (isset($item->xfn)) {
                $attrs['rel'] = $item->xfn;
            }
            if (!isset($item->url) && ($_url= get_permalink($item->ID))) {
                $item->url = $_url;
            }

            $attrs['href']         = ! empty($item->url) ? $item->url : '';
            $attrs['aria-current'] = ! empty($item->current) ? 'page' : '';
            $attrs                 = apply_filters(
                'nav_menu_link_attributes',
                $attrs,
                $item,
                $args,
                $depth
            );

            $attributes = '';
            foreach ($attrs as $attr => $value) {
                if (is_scalar($value) && '' !== $value && false !== $value) {
                    $value      = ('href' === $attr) ? esc_url($value) : esc_attr($value);
                    $attributes .= ' ' . $attr . '="' . $value . '"';
                }
            }

            $title = apply_filters('the_title', ($item->title??$item->post_title), $item->ID);
            $title = apply_filters('nav_menu_item_title', $title, $item, $args, $depth);

            $item_output = $indent;
            $item_output .= $args->before??'';
            $item_output .= '<a' . $attributes . '>';
            $item_output .= ($args->link_before??'') . $title . ($args->link_after??'');
            $item_output .= '</a>';
            $item_output .= $args->after??'';
            $item_output .= $additional . $n;

            $output .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
        }

        /**
         * Ends the element output, if needed.
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param WP_Post $item Page data object. Not used.
         * @param int $depth Depth of page. Not Used.
         * @param stdClass $args An object of wp_nav_menu() arguments.
         *
         * @since 3.0.0
         *
         * @see Walker::end_el()
         *
         */
        public function end_el(&$output, $item, $depth = 0, $args = null)
        {
            if (isset($args->item_spacing) && 'discard' === $args->item_spacing) {
                $t = '';
                $n = '';
            } else {
                $t = "\t";
                $n = "\n";
            }
            $indent = $t ? str_repeat("\t", $depth + 1 + (! $this->has_children ? 1 : 0)) : '';
            $output .= "$indent</li>{$n}";
        }
    }
}

